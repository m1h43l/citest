**FREE

//                          The MIT License (MIT)
// 
// Copyright (c) 2021 Mihael Schmidt
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy 
// of this software and associated documentation files (the "Software"), to deal 
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
// SOFTWARE.


ctl-opt nomain;


//
// Prototypes
//
dcl-pr stomp_init int(10) extproc(*dclcase) end-pr;

dcl-pr waitForReceipts extproc('waitForReceipts');
  conn pointer const;
end-pr;


/define SOCKET_UNIX98

/include 'errno_h.rpgle'
/include 'ilecee.rpginc'
/include 'libc_h.rpgle'
/include 'libtree/libtree_h.rpgle'
/include 'llist/llist_h.rpgle'
/include 'message/message_h.rpgle'
/include 'net_h.rpgle'
/include 'qusec.rpginc'
/include 'socket_h.rpgle'
/include 'stomp_h.rpginc'
/include 'stompext.rpginc'
/include 'stompframe.rpginc'
/include 'stomplog.rpginc'
/include 'stompparser.rpginc'
/include 'stomputil.rpginc'


//
// Templates
//
dcl-ds stomp_header_t qualified template;
  socket int(10);
  host char(255);
  port int(10);
  connected ind;
  options pointer;
  sessionId char(100);
  extension pointer;
  useReceipts ind;
  receiptId uns(20);
  openReceipts pointer;
  bufferedFrames pointer;
  transactionId varchar(100);
  heartbeatServer uns(10);
  heartbeatClient uns(10);
end-ds;


//
// Global Variables
//
dcl-s logger pointer;


//
// Procedures
//
dcl-proc stomp_init export;
  dcl-pi *n int(10) end-pi;

  dcl-ds errorCode likeds(qusec_t) inz;

  logger = stomp_log_create('stomp');

  cee4rage2(%paddr(stomp_exitHandler) : errorCode);
  
  return 0;
end-proc;

  
dcl-proc stomp_exitHandler;
  dcl-pi *n;
    activationGroupMark uns(20);
    reason uns(10);
    resultCode uns(10);
    userResultCode uns(10);
  end-pi;

  stomp_log_dispose(logger);
end-proc;


dcl-proc stomp_create export;
  dcl-pi *N pointer;
    host varchar(255) const;
    port int(10) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(ptr);
  dcl-s flags int(10);
  dcl-s c_err int(10) based(errPtr);

  ptr = %alloc(%size(stomp_header_t));
 
  clear header;
  header.host = host;
  header.port = port;
  header.connected = *off;
  header.extension = *null;
  header.useReceipts = *off;
  header.options = tree_rb_create(%paddr('tree_rb_int_compare'));
  header.openReceipts = list_create();
  header.bufferedFrames = list_create();
 
  header.socket = socket(AF_INET : SOCK_STREAM : PROTOCOL_DEFAULT);
  if (header.socket = -1);
    errPtr = errno();
    message_escape('Could not create socket. ' + %char(c_err) + ': ' + %str(strerror(c_err)));
  endif;
 
  stomp_log(logger : 'STOMP client created');
 
  return ptr;
end-proc;


dcl-proc stomp_open export;
  dcl-pi *N;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-ds socket_address_inet likeds(socket_address_inet_t);
  dcl-s c_err int(10) based(errPtr);
  dcl-ds node likeds(tree_node_int_t) based(nodePtr);
  dcl-ds timeout likeds(timeout_t) based(node.value);
     
  clear socket_address_inet;
  socket_address_inet.family = AF_INET;
  socket_address_inet.addr = inet_addr(%trim(header.host));
  socket_address_inet.port = header.port;
  socket_address_inet.zero = *allx'00';
  
  if (connect(header.socket : %addr(socket_address_inet) : %size(socket_address_inet)) = -1);
    errPtr = errno();
    message_escape('Could not open socket connection. ' + %char(c_err) + ': ' + %str(strerror(c_err)));
  endif;
  
  // set timeout
  if (tree_rb_int_containsKey(header.options : STOMP_OPTION_TIMEOUT));
    nodePtr = tree_rb_int_get(header.options : STOMP_OPTION_TIMEOUT);
    
    if (setsockopt(header.socket : SOL_SOCKET: SO_RCVTIMEO : %addr(timeout) : %size(timeout)) = -1);
      errPtr = errno();
      message_escape('Could not set socket timeout. ' + %char(c_err) + ': ' + %str(strerror(c_err)));
    endif;
  endif;
       
  header.connected = *on;
  
  stomp_log(logger : 'socket connection established to ' + %trimr(header.host) + ':' + %char(header.port));
end-proc;


dcl-proc stomp_close export;
  dcl-pi *N;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  if (header.connected);
    callp close(header.socket);
    header.connected = *off;
  endif;

  stomp_log(logger : 'socket connection closed');
end-proc;


dcl-proc stomp_finalize export;
  dcl-pi *N;
    conn pointer;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  if (header.connected);
    // close socket
    stomp_close(conn);
  endif;

  tree_rb_int_finalize(header.options); 

  if (header.extension <> *null);
    stomp_ext_finalize(header.extension);
  endif;

  list_dispose(header.openReceipts);
  list_dispose(header.bufferedFrames);

  stomp_log(logger : 'STOMP client disposed');

  dealloc(n) conn;
end-proc;


dcl-proc stomp_setTimeout export;
  dcl-pi *N;
    conn pointer const;
    mseconds int(10) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-ds timeout likeds(timeout_t);

  timeout.seconds = mseconds / 1000;
  timeout.useconds = %rem(mseconds : 1000) * 1000;
  tree_rb_int_put(header.options : STOMP_OPTION_TIMEOUT : %addr(timeout) : %size(timeout));
  stomp_log(logger : 'set timeout: ' + %char(mseconds) + 'ms');
end-proc;


dcl-proc stomp_setVirtualHost export;
  dcl-pi *N;
    conn pointer const;
    pVirtualHost varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s virtualHost varchar(100);

  virtualHost = pVirtualHost;
  tree_rb_int_put(header.options : STOMP_OPTION_VIRTUAL_HOST :
                  %addr(virtualHost : *DATA) : %len(virtualHost));
  stomp_log(logger : 'set virtual host: ' + pVirtualHost);
end-proc;


dcl-proc stomp_setClientId export;
  dcl-pi *N;
    conn pointer const;
    pClientId varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s clientId varchar(100);

  clientId = pClientId;
  tree_rb_int_put(header.options : STOMP_OPTION_CLIENT_ID :
                  %addr(clientId : *DATA) : %len(clientId));
  stomp_log(logger : 'set client id: ' + pClientId);
end-proc;


dcl-proc stomp_setContentType export;
  dcl-pi *N;
    conn pointer const;
    pContentType varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s contentType varchar(100);

  contentType = pContentType;
  tree_rb_int_put(header.options : STOMP_OPTION_CONTENT_TYPE :
                  %addr(contentType : *DATA) : %len(contentType));
  stomp_log(logger : 'set content type: ' + contentType);
end-proc;


dcl-proc stomp_setAckMode export;
  dcl-pi *N;
    conn pointer const;
    pMode varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s mode varchar(100);

  mode = pMode;
  tree_rb_int_put(header.options : STOMP_OPTION_ACK : %addr(mode : *data) : %len(mode));
  stomp_log(logger : 'set ack mode: ' + pMode);
end-proc;


dcl-proc stomp_setDurableSubscriberName export;
  dcl-pi *N;
    conn pointer const;
    pName varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s name varchar(100);

  name = pName;
  tree_rb_int_put(header.options : STOMP_OPTION_DURABLE_SUBSCRIBER :
                  %addr(name : *DATA) : %len(name));
  stomp_log(logger : 'set durable subscriber: ' + pName);
end-proc;


dcl-proc stomp_getSessionId export;
  dcl-pi *N like(stomp_sessionid_t);
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  return header.sessionId;
end-proc;


dcl-proc stomp_setPersistMessages export;
  dcl-pi *N;
    conn pointer const;
    persistent ind const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s value varchar(6);

  if (persistent);
    value = 'true';
  else;
    value = 'false';
  endif;

  tree_rb_int_put(header.options : STOMP_OPTION_PERSISTENT : %addr(value : *DATA) : %len(value));
  stomp_log(logger : 'set persist messages: ' + value);
end-proc;

dcl-proc stomp_sendFrame export;
  dcl-pi *N;
    conn pointer const;
    frame pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-ds buffer likeds(stomp_util_buffer_t);
  dcl-s rc int(10);
  dcl-s receiptId like(stomp_receiptid_t);
  
  stomp_log(logger : 'sending ' + stomp_frame_getCommand(frame) + ' frame');
  
  // all frames (except the CONNECT frame) might get a receipt header
  if (stomp_frame_getCommand(frame) <> 'CONNECT' and
      stomp_isUsingReceipts(conn));
    receiptId = nextReceiptId(conn);
    stomp_frame_setHeader(frame : 'receipt' : receiptId);
    stomp_addOpenReceipt(conn : receiptid);
  endif;
  
  buffer = stomp_frame_serialize(frame);
  
  rc = send(header.socket : buffer.data : buffer.length : 0);
  
  stomp_log(logger : 'sent ' + %char(rc) + ' bytes');
  
  if (stomp_isUsingReceipts(conn));
    waitForReceipts(conn);
  endif;
  
  on-exit;
    stomp_util_buffer_dispose(buffer);
end-proc;


dcl-proc stomp_receiveFrame export;
  dcl-pi *N pointer;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s length int(10);
  dcl-s ptr pointer;
  dcl-s rc int(10);
  dcl-s returnFrame pointer;
  dcl-s bufferedFrame pointer based(tmpPtr);
  dcl-s running ind inz(*on);

  stomp_log(logger : 'receiving frames ...');
  
  // return next buffered frames
  if (not list_isEmpty(header.bufferedFrames));
    tmpPtr =list_getFirst(header.bufferedFrames);
    list_removeFirst(header.bufferedFrames);
    stomp_log(logger : 'return buffered frame ' + stomp_frame_getCommand(bufferedFrame));
    return bufferedFrame;
  endif;
  
  length = STOMP_MAX_FRAME_SIZE;
  ptr = %alloc(length);
  
  dow (running);
    rc = recv(header.socket : ptr : length : 0);
    if (rc = 1 or rc = 2);
      if (isHeartbeat(ptr : rc));
        stomp_log(logger : 'received heartbeat');
      else;
        stomp_log(logger : 'dropping invalid heartbeat data');
      endif;
    elseif (rc > 0);
      stomp_log(logger : 'received ' + %char(rc) + ' bytes');
  
      returnFrame = stomp_parser_parse(ptr : rc);
      
      stomp_log(logger : 'received ' + stomp_frame_getCommand(returnFrame) + ' frame');
      
      if (stomp_frame_getCommand(returnFrame) = 'CONNECTED');
        checkHeartbeatNegotiation(conn : returnFrame);
      endif;
      
      running = *off;
    else;
      stomp_log(logger : 'no data received from connection');
      running = *off;
    endif;
  enddo;
  
  return returnFrame;
  
  on-exit;
    dealloc ptr;
end-proc;


dcl-proc isHeartbeat;
  dcl-pi *n ind;
    data pointer const;
    length int(10) const;
  end-pi;

  // in UTF-8 and UCS-2
  dcl-c CR u'000D';
  dcl-c LF u'000A';
  dcl-c CRLF u'000A000D';
  
  dcl-s value1 char(1) ccsid(*utf8) based(data);
  dcl-s value2 char(2) ccsid(*utf8) based(data);
  
  if (length = 1);
    return value1 = CR or value1 = LF;
  elseif (length = 2);
    return value2 = CRLF;
  else;
    return *off;
  endif;
end-proc;


dcl-proc checkHeartbeatNegotiation;
  dcl-pi *n;
    client pointer const;
    frame pointer const;
  end-pi;

  dcl-s heartbeat varchar(100);
  dcl-s serverHeartbeat uns(10);
  dcl-s success ind inz(*on);
  
  heartbeat = stomp_frame_getHeader(frame : 'heart-beat');
  if (heartbeat = *blank);
    if (stomp_getHeartbeatServer(client) <> STOMP_HEARTBEAT_NONE);
      stomp_log(logger : 'Failed heartbeat negotiation. Server sends no heartbeat.');
      success = *off;
    endif;
  else;
    serverHeartbeat = %uns(%subst(heartbeat : 1 : %scan(',' : heartbeat)-1));
    if (serverHeartbeat <> stomp_getHeartbeatServer(client));
      stomp_log(logger : 'Failed heartbeat negotiation. Server heartbeat interval: ' + 
          %char(serverHeartbeat));
      success = *off;
    endif;
  endif;
  
  if (success);
    stomp_log(logger : 'Heartbeat negotiation successful');
  endif;
end-proc;


dcl-proc stomp_setExtension export;
  dcl-pi *N;
    conn pointer const;
    extension pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  if (header.extension <> *null);
    stomp_log(logger : 'replace extension: ' + stomp_ext_getId(header.extension));
    stomp_ext_finalize(header.extension);
  endif;

  header.extension = extension;

  stomp_log(logger : 'set extension: ' + stomp_ext_getId(extension));
end-proc;


dcl-proc stomp_getExtension export;
  dcl-pi *N pointer;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  return header.extension;
end-proc;


dcl-proc stomp_useReceipts export;
  dcl-pi *N;
    conn pointer const;
    value ind const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  header.useReceipts = value;

  stomp_log(logger : 'set using receipts: ' + value);
end-proc;


dcl-proc stomp_isUsingReceipts export;
  dcl-pi *N ind;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
 
  return header.useReceipts;
end-proc;


dcl-proc stomp_hasOption export;
  dcl-pi *N ind;
    conn pointer const;
    option int(10) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-ds node likeds(tree_node_int_t) based(nodePtr);

  return tree_rb_int_containsKey(header.options : option);
end-proc;


dcl-proc stomp_getOptionValue export;
  dcl-pi *N pointer;
    conn pointer const;
    option int(10) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-ds node likeds(tree_node_int_t) based(nodePtr);

  nodePtr = tree_rb_int_get(header.options : option);
  return node.value;
end-proc;


dcl-proc stomp_setSessionId export;
  dcl-pi *N;
    conn pointer const;
    session like(stomp_header_t.sessionId) const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  header.sessionId = session;

  stomp_log(logger : 'set session id: ' + session);
end-proc;


dcl-proc stomp_addOpenReceipt export;
  dcl-pi *N;
    conn pointer const;
    pReceipt like(stomp_receiptid_t) const;
  end-pi;
  
  dcl-s receipt like(stomp_receiptid_t);
  dcl-ds header likeds(stomp_header_t) based(conn);

  receipt = pReceipt;
  list_add(header.openReceipts : %addr(receipt : *data) : %len(receipt));

  stomp_log(logger : 'added open receipt: ' + receipt);
end-proc;


dcl-proc stomp_getNumberOfOpenReceipts export;
  dcl-pi *N int(10);
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);

  return list_size(header.openReceipts);
end-proc;


///
// Wait for receipts
//
// The procedure receives frames over the socket of the client and waits
// until all open receipts has been received. <br/>
//
// Because receipts may not be sent directly after the frame with the receipt header
// all non RECEIPT frames will be buffered and returned by calling the
// <em>stomp_receiveFrame</em> procedure.
//
// @param Pointer to client
///
dcl-proc waitForReceipts;
  dcl-pi *N;
    conn pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(conn);
  dcl-s rc int(10);
  dcl-s ptr pointer;
  dcl-s length int(10);
  dcl-s frame pointer;
  dcl-s receiptId like(stomp_receiptid_t);
  dcl-s x int(10);

  stomp_log(logger : 'waiting for receipts ...');
  
  length = STOMP_MAX_FRAME_SIZE;
  ptr = %alloc(length);
  
  dow (not list_isEmpty(header.openReceipts));
    rc = recv(header.socket : ptr : length : 0);
  
    if (rc <= 0);
      stomp_log(logger : 'no data received from connection');
      leave;
    else;
      frame = stomp_parser_parse(ptr : rc);
  
      stomp_log(logger : 'received ' + stomp_frame_getCommand(frame) + ' frame');
  
      if (stomp_frame_getCommand(frame) = 'RECEIPT');
        receiptId = stomp_frame_getHeader(frame : 'receipt-id');
  
        stomp_log(logger : 'received receipt with id: ' + receiptId);
  
        x = list_indexOf(header.openReceipts : %addr(receiptId : *DATA) :
                         %len(receiptId));
        if (x >=0); // open receipt found
          list_remove(header.openReceipts : x);
          stomp_log(logger : 'removed receipt ' + receiptId +
                             ' from open receipt list (position ' +
                             %char(x) + ')');
        else;
          stomp_log(logger : 'receipt ' + receiptId + ' is not in the ' +
                             'list of open receipts');
        endif;
  
      else;
        // no receipt => add frame to buffered frames
        list_add(header.bufferedFrames : %addr(frame) : %size(frame));
        stomp_log(logger : 'buffered frame ' + stomp_frame_getCommand(frame) +
                           '. waiting for receipt ...');
      endif;
    endif;
  
  enddo;
  
  dealloc ptr;
end-proc;


dcl-proc stomp_setTransactionId export;
  dcl-pi *n;
    client pointer const;
    transactionId varchar(100) const;
  end-pi;

  dcl-ds header likeds(stomp_header_t) based(client);
  
  header.transactionId = transactionId;
end-proc;


dcl-proc stomp_getTransactionId export;
  dcl-pi *n varchar(100);
    client pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(client);
  
  return header.transactionId;
end-proc;


dcl-proc stomp_setHeartbeatServer export;
  dcl-pi *n;
    client pointer const;
    heartbeatValue uns(10) const;
  end-pi;

  dcl-ds header likeds(stomp_header_t) based(client);
  
  header.heartbeatServer = heartbeatValue;
end-proc;


dcl-proc stomp_getHeartbeatServer export;
  dcl-pi *n uns(10);
    client pointer const;
  end-pi;

  dcl-ds header likeds(stomp_header_t) based(client);
  
  return header.heartbeatServer;
end-proc;


dcl-proc nextReceiptId;
  dcl-pi *n varchar(100);
    client pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_header_t) based(client);
  
  if (header.receiptId = *hival);
    header.receiptId = 0;
  endif;
  
  header.receiptId += 1;
  
  return 'msg-' + %char(header.receiptId);
end-proc;
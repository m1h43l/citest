**FREE

//                          The MIT License (MIT)
// 
// Copyright (c) 2021 Mihael Schmidt
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy 
// of this software and associated documentation files (the "Software"), to deal 
// in the Software without restriction, including without limitation the rights 
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
// copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
// SOFTWARE.

ctl-opt nomain;


/include 'stompext.rpginc'
/include 'message/message_h.rpgle'


dcl-proc stomp_ext_getId export;
  dcl-pi *N varchar(50);
    extension pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
 
  return %trimr(header.id);
end-proc;


dcl-proc stomp_ext_connect export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    user varchar(100) const options(*nopass);
    pass varchar(100) const options(*nopass);
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s connPointer pointer(*proc);
  dcl-pr connect extproc(connPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    user varchar(100) const options(*nopass);
    pass varchar(100) const options(*nopass);
  end-pr;

  connPointer = header.proc_connect;

  if (%parms() = 3);
    connect(extension : client : frame);
  elseif (%parms() = 4);
    connect(extension : client : frame : user);
  elseif (%parms() = 5);
    connect(extension : client : frame : user : pass);
  endif;
end-proc;


dcl-proc stomp_ext_send export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
    messageData pointer const options(*string);
    messageLength uns(10) const options(*omit : *nopass);
    contentType varchar(100) const options(*nopass);
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s sendPointer pointer(*proc);
  dcl-pr send extproc(sendPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
    messageData pointer const options(*string);
  end-pr;

  sendPointer = header.proc_send;

  send(extension : client : frame : destination : messageData);
end-proc;


dcl-proc stomp_ext_disconnect export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pi;

  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s disconnectPointer pointer(*proc);
  dcl-pr disconnect extproc(disconnectPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pr;

  disconnectPointer = header.proc_disconnect;

  disconnect(extension : client : frame);
end-proc;


dcl-proc stomp_ext_subscribe export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s subscribePointer pointer(*proc);
  dcl-pr subscribe extproc(subscribePointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
  end-pr;
  
  subscribePointer = header.proc_subscribe;

  subscribe(extension : client : frame : destination);
end-proc;


dcl-proc stomp_ext_unsubscribe export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s unsubscribePointer pointer(*proc);
  dcl-pr unsubscribe extproc(unsubscribePointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    destination varchar(100) const;
  end-pr;
  
  unsubscribePointer = header.proc_unsubscribe;

  unsubscribe(extension : client : frame : destination);
end-proc;


dcl-proc stomp_ext_begin export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    transactionId varchar(100) const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s beginPointer pointer(*proc);
  dcl-pr begin extproc(beginPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    transactionId varchar(100) const;
  end-pr;
  
  beginPointer = header.proc_abort;

  begin(extension : client : frame : transactionId);
end-proc;


dcl-proc stomp_ext_commit export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s commitPointer pointer(*proc);
  dcl-pr l_commit extproc(commitPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pr;
  
  commitPointer = header.proc_abort;

  l_commit(extension : client : frame);
end-proc;


dcl-proc stomp_ext_abort export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s abortPointer pointer(*proc);
  dcl-pr abort extproc(abortPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
  end-pr;
  
  abortPointer = header.proc_abort;

  abort(extension : client : frame);
end-proc;


dcl-proc stomp_ext_ack export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    ackFrame pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s ackPointer pointer(*proc);
  dcl-pr ack extproc(ackPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    ackFrame pointer const;
  end-pr;
  
  ackPointer = header.proc_ack;

  ack(extension : client : frame : ackFrame);
end-proc;


dcl-proc stomp_ext_nack export;
  dcl-pi *N;
    extension pointer const;
    client pointer const;
    frame pointer const;
    nackFrame pointer const;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s nackPointer pointer(*proc);
  dcl-pr nack extproc(nackPointer);
    extension pointer const;
    client pointer const;
    frame pointer const;
    nackFrame pointer const;
  end-pr;
  
  nackPointer = header.proc_nack;

  nack(extension : client : frame : nackFrame);
end-proc;


dcl-proc stomp_ext_finalize export;
  dcl-pi *N;
   extension pointer;
  end-pi;
  
  dcl-ds header likeds(stomp_ext_t) based(extension);
  dcl-s finalizePointer pointer(*proc);
  dcl-pr finalize extproc(finalizePointer);
    extension pointer;
  end-pr;
  
  finalizePointer = header.proc_finalize;

  finalize(extension);

  if (extension <> *null);
    monitor;
      dealloc(n) extension;
      on-error;
        // nothing
    endmon;
  endif;
end-proc;
